@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IJSRuntime JSRuntime

@if (scheda != null)
{
    <EditForm Model="@scheda">
        <p>
            <InputText @bind-Value="scheda.Nome" placeholder="Nome"></InputText>
            <InputText @bind-Value="scheda.Archetipo" placeholder="Archetipo"></InputText>
            <InputText @bind-Value="scheda.Professione" placeholder="Professione"></InputText>
        </p>
        <p>BD: @scheda.BonusDanno</p>
        <p>Struttura: @scheda.Struttura</p>
        <p>Movimento: @scheda.Movimento</p>
        <p>PF Massimi: @scheda.PuntiFeritaMassimi</p>
        <p>PF Attuali: @scheda.PuntiFeritaAttuali</p>
        <p>PM Massimi: @scheda.PuntiMagiaMassimi</p>
        <p>PM Attuali: @scheda.PuntiMagiaAttuali</p>
        <p>Sanità Massima: @scheda.SanitaMassima</p>
        <div class="flex flex-wrap border border-slate-900">
            <div class="flex-[25%] lg:flex-1 odd:bg-gray-200 even:bg-white">
                <CaratteristicaComponent Caratteristica="scheda.FOR" CaratteristicaChanged="@UpdateUI">
                </CaratteristicaComponent>
            </div>
            <div class="flex-[25%] lg:flex-1 odd:bg-gray-200 even:bg-white">
                <CaratteristicaComponent Caratteristica="scheda.DES" CaratteristicaChanged="@UpdateUI">
                </CaratteristicaComponent>
            </div>
            <div class="flex-[25%] lg:flex-1 odd:bg-gray-200 even:bg-white">
                <CaratteristicaComponent Caratteristica="scheda.COS" CaratteristicaChanged="@UpdateUI">
                </CaratteristicaComponent>
            </div>
            <div class="flex-[25%] lg:flex-1 odd:bg-gray-200 even:bg-white">
                <CaratteristicaComponent Caratteristica="scheda.TAG" CaratteristicaChanged="@UpdateUI">
                </CaratteristicaComponent>
            </div>
            <div class="flex-[25%] lg:flex-1 odd:bg-gray-200 even:bg-white">
                <CaratteristicaComponent Caratteristica="scheda.FAS" CaratteristicaChanged="@UpdateUI">
                </CaratteristicaComponent>
            </div>
            <div class="flex-[25%] lg:flex-1 odd:bg-gray-200 even:bg-white">
                <CaratteristicaComponent Caratteristica="scheda.INT" CaratteristicaChanged="@UpdateUI">
                </CaratteristicaComponent>
            </div>
            <div class="flex-[25%] lg:flex-1 odd:bg-gray-200 even:bg-white">
                <CaratteristicaComponent Caratteristica="scheda.POT" CaratteristicaChanged="@UpdateUI">
                </CaratteristicaComponent>
            </div>
            <div class="flex-[25%] lg:flex-1 odd:bg-gray-200 even:bg-white">
                <CaratteristicaComponent Caratteristica="scheda.IST" CaratteristicaChanged="@UpdateUI">
                </CaratteristicaComponent>
            </div>
        </div>
        <br>
        <div class="flex border border-slate-900">
            <input class="w-full px-2 text-sm" @bind-value="cercaAbilita" @bind-value:event="oninput"
            placeholder="Cerca abilità..." />
            <button class="btn-primary" @onclick="@(e => cercaAbilita = "")">X</button>
        </div>
        <div class="flex flex-wrap border-x border-b border-slate-900">
            @foreach (var abilita in scheda!.Abilita.Where(a => a.Nome.ToLower().Contains(cercaAbilita.ToLower())).OrderBy(o
           => o.Nome))
            {
                <div class="lg:flex-[0_1_50%] flex-[0_1_100%] odd:bg-gray-200 even:bg-white">
                    <AbilitaComponent abilita="abilita" OnDelete="DeleteAbilita"></AbilitaComponent>
                </div>
            }
        </div>
        <NuovaAbilitaComponent OnNuovaAbilita="AddAbilita"></NuovaAbilitaComponent>
        <br>
        @foreach (var arma in scheda!.Armi)
        {
            <ArmaComponent Arma="arma" Abilita="@(scheda.Abilita.Single(s => s.Nome == arma.NomeAbilita))"
        OnDelete="DeleteArma"></ArmaComponent>
        }
        <NuovaArmaComponent OnNuovaArma="AddArma" ElencoAbilita="scheda!.Abilita.Where(s => s.Combattimento).ToList()">
        </NuovaArmaComponent>
    </EditForm>
}


@code {
    [Parameter]
    public SchedaModel? scheda { get; set; }

    private string cercaAbilita { get; set; } = "";

    private async void salva()
    {
        await localStorage.SetItemAsync("scheda", scheda);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender) JSRuntime.InvokeVoidAsync("makeSelectable");
        salva();
    }

    private void UpdateUI(CaratteristicaModel e)
    {
        @* Console.WriteLine($"{e.Abbreviazione}: {e.Base}"); *@
    }

    private void AddAbilita(AbilitaModel e)
    {
        scheda!.Abilita.Add(e);
    }

    private void DeleteAbilita(AbilitaModel e)
    {
        scheda!.Abilita.Remove(e);
    }

    private void AddArma(ArmaModel e)
    {
        scheda!.Armi.Add(e);
    }

    private void DeleteArma(ArmaModel e)
    {
        scheda!.Armi.Remove(e);
    }
}
