@if (Abilita != null)
{
    <div class="flex py-2 px-1 gap-1">
        <div class="leading-6 flex-grow-0">
            <input type="checkbox" checked="@Abilita.Utilizzata" @onchange="AbilitaUtilizzataChange" />
        </div>
        <div class="leading-6 flex-auto text-sm">
            @Abilita.Nome
        </div>
        <div class="flex-grow-0 leading-6 text-sm text-slate-400">
            (@Abilita.Default)
        </div>
        @if (Abilita.Custom)
        {
            <button type="button" @onclick="Delete">
                <i class="bi bi-trash-fill"></i>
            </button>
        }
        <div class="leading-6 flex-grow-0">
            <input type="number" class="w-10 font-bold text-right select-all" value="@Abilita.Base" @oninput="AbilitaBaseChange" />
        </div>
        <div class="leading-6 text-sm flex-[0_0_40px] text-center">@Abilita.Arduo/@Abilita.Estremo</div>
    </div>
}


@code {
    [Parameter]
    public AbilitaModel? Abilita { get; set; }

    [Parameter]
    public EventCallback<AbilitaModel> OnDelete { get; set; }

    [Parameter]
    public EventCallback<AbilitaModel> OnChange { get; set; }

    private async void Delete()
    {
        await OnDelete.InvokeAsync(Abilita);
    }

    private async void AbilitaBaseChange(ChangeEventArgs e)
    {
        var v = !string.IsNullOrEmpty(e.Value?.ToString()) ? Convert.ToInt32(e.Value) : 0;
        Abilita.Base = v;
        await OnChange.InvokeAsync(Abilita);
    }

    private async void AbilitaUtilizzataChange(ChangeEventArgs e)
    {
        var v = !string.IsNullOrEmpty(e.Value?.ToString()) ? Convert.ToBoolean(e.Value) : false;
        Abilita.Utilizzata = v;
        await OnChange.InvokeAsync(Abilita);
    }
}