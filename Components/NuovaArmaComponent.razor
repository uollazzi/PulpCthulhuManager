@inject IJSRuntime JSRuntime
<button class="btn-primary w-full" @onclick="Open">Aggiungi nuova arma</button>

@if (isModalOpen)
{
    <div class="fixed z-10 left-0 top-0 w-full h-screen overflow-y-hidden bg-white flex justify-center items-center">
        <div class="mx-4 my-auto p-2 bg-white flex-col">
            <div class="mb-4 flex items-end justify-end">
                <button type="button" class="text-slate-400" @onclick="Close">
                    <i class="bi bi-x-lg"></i>
                </button>
            </div>
            <div class="flex gap-2">
                <div class="mb-4 flex-[1_1_150px]">
                    <label for="nomeArma" class="text-slate-400">Nome</label>
                    <InputText id="nomeArma" type="text" class="w-full border border-slate-900 p-2" @bind-Value="arma.Nome">
                    </InputText>
                </div>
                <div class="mb-4 flex-[1_1_150px]">
                    <label for="danniArma" class="text-slate-400">Danni</label>
                    <InputText id="danniArma" class="w-full border border-slate-900 p-2" @bind-Value="arma.Danni" />
                </div>
            </div>
            <div class="flex gap-2">
                <div class="mb-4 flex-[1_1_150px]">
                    <label for="gittataArma" class="text-slate-400">Gittata</label>
                    <InputText id="gittataArma" class="w-full border border-slate-900 p-2" @bind-Value="arma.Gittata">
                    </InputText>
                </div>
                <div class="mb-4 flex-[1_1_150px]">
                    <label for="attacchiArma" class="text-slate-400">Attacchi</label>
                    <InputText id="attacchiArma" class="w-full border border-slate-900 p-2" @bind-Value="arma.Attacchi">
                    </InputText>
                </div>
            </div>
            <div class="flex gap-2">
                <div class="mb-4 flex-[1_1_150px]">
                    <label for="munizioniArma" class="text-slate-400">Munizioni</label>
                    <InputNumber id="munizioniArma" class="w-full border border-slate-900 p-2" @bind-Value="arma.Munizioni">
                    </InputNumber>
                </div>
                <div class="mb-4 flex-[1_1_150px]">
                    <label for="malfunzionamentoArma" class="text-slate-400">Malf.</label>
                    <InputNumber id="malfunzionamentoArma" class="w-full border border-slate-900 p-2"
                    @bind-Value="arma.Malfunzionamento"></InputNumber>
                </div>
            </div>
            <div class="mb-4">
                <InputCheckbox id="hasBonusDanno" class="m-2" @bind-Value="arma.ApplicaBonusDanno"></InputCheckbox>
                <label for="hasBonusDanno" class="text-slate-400">Applica Bonus al Danno</label>
            </div>
            <div class="mb-4">
                <label for="nomeAbilita" class="text-slate-400">Specifica Abilit√†</label>
                <ul id="nomeAbilita">
                    @foreach (var abilitaCombattimento in ElencoAbilita.OrderBy(o => o.Nome))
                    {
                        <li @onclick="@(() => Select(abilitaCombattimento.Nome))">
                            <div class="cursor-pointer text-teal-900">
                                @abilitaCombattimento.Nome
                            </div>
                        </li>
                    }
                </ul>
            </div>

        </div>
    </div>
}

@code {
    private ArmaModel arma = new ArmaModel();
    private bool isModalOpen = false;

    [Parameter]
    public EventCallback<ArmaModel> OnNuovaArma { get; set; }

    [Parameter]
    public List<AbilitaModel> ElencoAbilita { get; set; } = new List<AbilitaModel>();

    private void Add()
    {
        if (!string.IsNullOrEmpty(arma.Nome.Trim()) && !string.IsNullOrEmpty(arma.NomeAbilita.Trim()))
        {
            OnNuovaArma.InvokeAsync(arma);
            arma = new ArmaModel();
        }
    }

    private async void Open()
    {
        isModalOpen = true;
        await JSRuntime.InvokeVoidAsync("bodyOverflow", isModalOpen);
    }

    private async void Close()
    {
        isModalOpen = false;
        await JSRuntime.InvokeVoidAsync("bodyOverflow", isModalOpen);
    }

    private async void Select(string abilita)
    {
        arma.NomeAbilita = abilita;
        isModalOpen = false;
        await JSRuntime.InvokeVoidAsync("bodyOverflow", isModalOpen);
        Add();
    }
}