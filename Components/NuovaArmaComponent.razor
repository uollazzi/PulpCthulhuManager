<div class="flex border-x border-b border-slate-900 items-center">

    <div class="whitespace-nowrap p-2 cursor-pointer text-xs text-teal-900 font-bold" @onclick="ModalAbilita">@(string.IsNullOrEmpty(arma.NomeAbilita) ? "Scegli Abilit√†" :
        arma.NomeAbilita)</div>
    <input type="text" class="px-2 text-sm w-full" @bind-value="arma.Nome" placeholder="Nome arma" />
    @* <InputSelect @bind-Value="arma.NomeAbilita" class="text-sm">
        @foreach (var abilitaCombattimento in ElencoAbilita)
        {
        <option value="@abilitaCombattimento.Nome">@abilitaCombattimento.Nome</option>
        }

        </InputSelect> *@
</div>
<button class="btn-primary" @onclick="Add"><IconComponent IconName="add"></IconComponent></button>

@if (isModalAbilitaOpen)
{
    <div class="fixed z-10 left-0 top-0 w-full h-full overflow-auto bg-slate-200">
        <div class="mx-4 my-auto p-4 bg-white">
            <ul>
                @foreach (var abilitaCombattimento in ElencoAbilita)
                {
                    <li class="cursor-pointer" @onclick="@(() => SelectAbilita(abilitaCombattimento.Nome))">
                        @abilitaCombattimento.Nome</li>
                }
            </ul>
        </div>

    </div>
}


@code {
    private ArmaModel arma = new ArmaModel();
    private bool isModalAbilitaOpen = false;

    [Parameter]
    public EventCallback<ArmaModel> OnNuovaArma { get; set; }

    [Parameter]
    public List<AbilitaModel> ElencoAbilita { get; set; } = new List<AbilitaModel>();

    private void Add()
    {
        OnNuovaArma.InvokeAsync(arma);
        arma = new ArmaModel();
    }

    private void ModalAbilita()
    {
        isModalAbilitaOpen = true;
    }

    private void SelectAbilita(string abilita)
    {
        arma.NomeAbilita = abilita;
        isModalAbilitaOpen = false;
    }
}