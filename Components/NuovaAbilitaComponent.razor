@inject IJSRuntime JSRuntime
<button class="btn-primary w-full" @onclick="Open">Aggiungi nuova abilità</button>

@if (isModalOpen)
{
    <div class="fixed z-10 left-0 top-0 w-full h-screen overflow-y-hidden bg-white flex justify-center items-center">
        <div class="mx-4 my-auto p-4 bg-white">
            <div class="flex border-x border-b border-slate-900 items-center">

                <InputCheckbox class="m-2" @bind-Value="abilita.Combattimento"></InputCheckbox>
                <div class="whitespace-nowrap text-sm">
                    combat?
                </div>
                <input type="text" class="w-full px-2 text-sm" @bind-value="abilita.Nome" placeholder="Nome abilità" />
                <button class="btn-primary w-full" @onclick="Add">Aggiungi</button>
            </div>
        </div>
    </div>
}

@code {
    private AbilitaModel abilita = new AbilitaModel();
    private bool isModalOpen = false;
    [Parameter]
    public EventCallback<AbilitaModel> OnNuovaAbilita { get; set; }

    private async void Open()
    {
        isModalOpen = true;
        await JSRuntime.InvokeVoidAsync("bodyOverflow", isModalOpen);
    }

    private void Add()
    {
        if (!string.IsNullOrEmpty(abilita.Nome.Trim()))
        {
            OnNuovaAbilita.InvokeAsync(abilita);
            abilita.Base = 0;
            abilita.Custom = true;
            OnNuovaAbilita.InvokeAsync(abilita);
            abilita = new AbilitaModel();
        }

    }
}