@inject IJSRuntime JSRuntime
<button class="btn-primary w-full" @onclick="Open">Aggiungi nuova abilità</button>

@if (isModalOpen)
{
    <div class="fixed z-10 left-0 top-0 w-full h-screen overflow-y-hidden bg-white flex justify-center items-center">
        <div class="mx-4 my-auto p-4 bg-white">
            <div class="mb-4 flex items-end justify-end">
                <button type="button" class="text-slate-400" @onclick="Close">
                    <i class="bi bi-x-lg"></i>
                </button>
            </div>
            <div class="mb-4">
                <label for="nomeAbilita" class="text-slate-400">Nome abilità</label>
                <input type="text" id="nomeAbilita" class="w-full border border-slate-900 p-2" @bind-value="abilita.Nome" />
            </div>
            <div class="mb-4">
                <InputCheckbox id="isCombat" class="m-2" @bind-Value="abilita.Combattimento"></InputCheckbox>
                <label for="isCombat" class="text-slate-400">Abilità di combattimento</label>
            </div>
            <div class="mb-4">
                <button class="btn-primary w-full" @onclick="Add">Aggiungi</button>
            </div>

        </div>
    </div>
}

@code {
    private AbilitaModel abilita = new AbilitaModel();
    private bool isModalOpen = false;
    [Parameter]
    public EventCallback<AbilitaModel> OnNuovaAbilita { get; set; }

    private async void Open()
    {
        isModalOpen = true;
        await JSRuntime.InvokeVoidAsync("bodyOverflow", isModalOpen);
    }

    private async void Close()
    {
        isModalOpen = false;
        await JSRuntime.InvokeVoidAsync("bodyOverflow", isModalOpen);
    }

    private async void Add()
    {
        if (!string.IsNullOrEmpty(abilita.Nome.Trim()))
        {
            abilita.Base = 0;
            abilita.Custom = true;
            await OnNuovaAbilita.InvokeAsync(abilita);
            abilita = new AbilitaModel();
        }
        isModalOpen = false;
        await JSRuntime.InvokeVoidAsync("bodyOverflow", isModalOpen);
    }
}