@page "/"
@using System.Text.Json
@using System.Reflection;
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IJSRuntime JSRuntime


<div class="btn-group mb-2 flex justify-between gap-2" role="group">
    <button class="btn-primary flex-auto" @onclick="Nuova">Nuova</button>
    <button class="btn-primary flex-auto" onclick="document.getElementById('selectedFile').click();">Importa</button>
    <button class="btn-primary flex-auto" @onclick="Export">Esporta</button>
</div>

<InputFile id="selectedFile" OnChange="Import" style="display: none;" />

<SchedaComponent scheda="@scheda"></SchedaComponent>

<div class="text-center text-sm text-slate-400">@version</div>

@code {
    SchedaModel scheda = new SchedaModel();
    string version = "1.1.1";

    protected override async Task OnInitializedAsync()
    {
        scheda = await localStorage.GetItemAsync<SchedaModel>("scheda");
    }

    private void Nuova()
    {
        scheda = new SchedaModel();
    }
    private async Task Export()
    {
        byte[] file = System.Text.Encoding.UTF8.GetBytes(JsonSerializer.Serialize(scheda));
        string fileName = scheda.Nome + ".json";
        await JSRuntime.InvokeVoidAsync("downloadFile", fileName, JsonSerializer.Serialize(scheda));
    }

    private async Task Import(InputFileChangeEventArgs e)
    {
        var fileContent = new StreamContent(e.File.OpenReadStream());
        var schedaLoaed = await fileContent.ReadFromJsonAsync<SchedaModel>();

        if (schedaLoaed != null)
        {
            scheda = schedaLoaed;
            this.StateHasChanged();
        }
    }

}
